[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "jwhollister",
    "section": "",
    "text": "news\n\n\ncode\n\n\nanalysis\n\n\n\n\n\n\n\n\n\n\n\nNov 13, 2022\n\n\nHarlow Malloc\n\n\n\n\n\n\n  \n\n\n\n\n\n\n\n\n\n\nnews\n\n\n\n\n\n\n\n\n\n\n\nNov 10, 2022\n\n\nTristan O’Malley\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nR\n\n\nSite-Details\n\n\n\n\n\n\n\n\n\n\n\nJun 16, 2018\n\n\nJeffrey Hollister\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nR\n\n\n\n\n\n\n\n\n\n\n\nJan 18, 2018\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nR\n\n\n\n\n\n\n\n\n\n\n\nApr 14, 2017\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nR\n\n\nGIS\n\n\n\n\n\n\n\n\n\n\n\nNov 6, 2015\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nR\n\n\n\n\n\n\n\n\n\n\n\nOct 30, 2015\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nR\n\n\n\n\n\n\n\n\n\n\n\nMar 13, 2015\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHacking\n\n\n\n\n\n\n\n\n\n\n\nFeb 2, 2015\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nR\n\n\n\n\n\n\n\n\n\n\n\nOct 9, 2014\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSite-Details\n\n\n\n\n\n\n\n\n\n\n\nOct 8, 2014\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "posts/welcome/index.html",
    "href": "posts/welcome/index.html",
    "title": "Welcome To My Blog",
    "section": "",
    "text": "Since this post doesn’t specify an explicit image, the first image in the post will be used in the listing page of posts."
  },
  {
    "objectID": "posts/post-with-code/index.html",
    "href": "posts/post-with-code/index.html",
    "title": "Post With Code",
    "section": "",
    "text": "This is a post with executable code."
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this blog"
  },
  {
    "objectID": "posts/2014-10-08-Colophon.html",
    "href": "posts/2014-10-08-Colophon.html",
    "title": "Colophon: jwhollister.com v0.2.0",
    "section": "",
    "text": "This third site is now being built with Jekyll, hosted on Github, and uses a slightly customized version of the Hyde theme. Hyde is released under the MIT license, and the content on my website is freely available via Creatitve Commons Zero Public Domain Declaration. I would have used WTFPL v2.0, but some might take offense.\nI will likely keep hacking on this site by adding some additional styling components and content (i.e. my CV). I do also plan on blogging some here when I get the time. I expect to maintain my old blog as an archive but new content will go here. Any technical changes will be added to this post."
  },
  {
    "objectID": "posts/2018-06-16-what-goes-up-must-blogdown-version-3-or-4-of-jwhollister-com.html",
    "href": "posts/2018-06-16-what-goes-up-must-blogdown-version-3-or-4-of-jwhollister-com.html",
    "title": "What goes up, must Blogdown: Version 3 (or 4) of jwhollister.com",
    "section": "",
    "text": "First, here are the links I found to be best:\n\nBlogdown Book\nUp and Running with Blogdown - Allison Presmanes Hill\nHugo Documentation\n\nSecond, I struggled picking a theme. I didn’t want one that was too fancy, but many of the simple themes had things missing that I wanted. In the end, I chose one of the nicest (IMO) of the clean themes, Nan Xiao’s Tanka. I made a few small tweaks for my purposes. First, I wanted to be able to create some stand alone pages that would have dates listed on them or get added to the blog listing on the main page. Second, I made a few tweaks to colors, and Last, I add some fanciness with the Font Awesome icons on the menus.\nAll in all, an improvement over my old site and now I can be like the cool kids."
  },
  {
    "objectID": "posts/2019-04-23-some-advice-on-applying-for-federal-jobs-my-perspective-from-epa.html",
    "href": "posts/2019-04-23-some-advice-on-applying-for-federal-jobs-my-perspective-from-epa.html",
    "title": "Some advice on applying for federal jobs: My perspective from EPA",
    "section": "",
    "text": "I started at USEPA as a post-doc in 2006. Since that time…"
  },
  {
    "objectID": "posts/category-feed/index.html",
    "href": "posts/category-feed/index.html",
    "title": "Getting a Category Feed Up and Running with Jekyll on Github",
    "section": "",
    "text": "This site is built on the Hyde theme which includes an atom.xml file. This is great and provides a feed for the entire blog but, often a category specific feed is required. For instance, my (poorly named) old blog Landscape Ecology 2.0 has been referenced by a couple of aggregators, most notably R-bloggers. Since I do blog about topics other than R, I need to be able to submit a feed that is specific to R. Wordpress does this automatically with Categories. You can also do this in Jekyll with a little work.\nAs it turns out many others have had this same need and there are a few options for getting it set up. Since my blog already has a site wide RSS feed built with Liquid templating all I needed was a category specifc one. So I simpl ammended the template from @snaptortoise jekyll-rss-feeds. For my blog, the template looks like:\n---\nlayout: none\n---\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<rss version=\"2.0\" xmlns:atom=\"http://www.w3.org/2005/Atom\">\n  <channel>\n    <title>{{ site.title | xml_escape }} - r</title>\n        <description>Posts categorized as 'r'</description>\n        <link>{{ site.url }}</link>\n        <atom:link href=\"{{ site.url }}/feed.r.xml\" rel=\"self\" type=\"application/rss+xml\" />\n    {% for post in site.categories.r limit:20 %}\n      <item>\n        <title>{{ post.title | xml_escape }}</title>\n        <description>{{ post.content | xml_escape }}</description>\n        <pubDate>{{ post.date | date: \"%a, %d %b %Y %H:%M:%S %z\" }}</pubDate>\n        <link>{{ site.url }}{{ post.url }}</link>\n        <guid isPermaLink=\"true\">{{ site.url }}{{ post.url }}</guid>\n      </item>\n    {% endfor %}\n    </channel>\n</rss>\nI have saved this in the source of my website as feed.r.xml. One gotcha is that Jekyll appears to convert all categories to lower case. I had it set to loop on site.categories.R and it wasn’t working. Switching to site.categories.r fixed the problem.\nSince feed.r.xml has the layout: null in the YAML, everytime the site builds on Github (i.e. everytime a change is made), this feed will get updated. In theory, I should be able to submit this feed to R-bloggers and everytime I have a new post with the R category, it will also get picked up by R-bloggers. Only downside to this is that a new category template will be required for each category that I want to build the RSS feed for.\nNOTE: Getting the Liquid templating to be highlighted in this post also took some work as the the Liquid was getting interpreted, not highlighted. Turns out it is as easy as wrapping the code with:\n{% raw %}\n{% endraw %}\nThis answer courtesy of StackOverflow\nANOTHER NOTE: And now to get even more into the weeds, getting {% raw %} to render took another approach, raw HTML. So that looks like\n<p>\n  <code>&#123;% raw %}</code>\n  <br>\n  <code>&#123;% endraw %}</code>\n</p> \nThat answer provided by SLaks.Blog."
  },
  {
    "objectID": "posts/index.html",
    "href": "posts/index.html",
    "title": "Colophon: jwhollister.com v0.2.0",
    "section": "",
    "text": "This third site is now being built with Jekyll, hosted on Github, and uses a slightly customized version of the Hyde theme. Hyde is released under the MIT license, and the content on my website is freely available via Creatitve Commons Zero Public Domain Declaration. I would have used WTFPL v2.0, but some might take offense.\nI will likely keep hacking on this site by adding some additional styling components and content (i.e. my CV). I do also plan on blogging some here when I get the time. I expect to maintain my old blog as an archive but new content will go here. Any technical changes will be added to this post."
  },
  {
    "objectID": "posts/colophon/index.html",
    "href": "posts/colophon/index.html",
    "title": "Colophon: jwhollister.com v0.2.0",
    "section": "",
    "text": "This third site is now being built with Jekyll, hosted on Github, and uses a slightly customized version of the Hyde theme. Hyde is released under the MIT license, and the content on my website is freely available via Creatitve Commons Zero Public Domain Declaration. I would have used WTFPL v2.0, but some might take offense.\nI will likely keep hacking on this site by adding some additional styling components and content (i.e. my CV). I do also plan on blogging some here when I get the time. I expect to maintain my old blog as an archive but new content will go here. Any technical changes will be added to this post."
  },
  {
    "objectID": "posts/organizing-photos-on-google-drive/index.html",
    "href": "posts/organizing-photos-on-google-drive/index.html",
    "title": "Automatically Organizing Photographs on Google Drive: Why isn’t this already a thing?",
    "section": "",
    "text": "Now, I thought that getting the photos moved and organized would be a snap because there certainly had to be a solution for keeping photos on Drive and organized. There were many options but none of them perfect. Many of them relied on Google+ Photos (I am not a fan of Google+), struggled with organizing large numbers of photos (nearly 20k), or were not able to be automated. It quickly became clear that I had to more less roll my own.\nThe solution I settled on in the end was to use a simple bash script set up as a cron job on an Ubuntu box that called grive and exiftool.\nUpdate 3/13/2015: I was going to have more in this post, but didn’t get around to it. In the meantime, grive started giving me problems and wasn’t syning correctly. I think I have a solution that uses google-drive-oacmlfuse to just mount google drive directly on the linux box. I need to update my bash scripts and once I get that done, I’ll post those scripts here."
  },
  {
    "objectID": "posts/quickmapr-pre-release/index.html",
    "href": "posts/quickmapr-pre-release/index.html",
    "title": "quickmapr: An R package for mapping and interacting with spatial data",
    "section": "",
    "text": "When I first started using R for my spatial analysis work I often was left struggling with viewing the results of my analysis and could only do so with a clunky workflow of pushing my sp or raster objects out to shapefiles or tiffs and then pulling those into Arcmap. In short, spatial data visualization was severely lacking in R.\nFast forward to now, and that has all really started to change. Most of the work in this space has been on incorporating the slew of javascript tools (e.g. D3, leaflet, Crosslet) for visualizing spatial data. This has resulted in some really cool packages like:\n\ncartographer\nleaflet\nggmap\nrMaps\n\nThese all result in great looking maps with nice interactivity; however, they all have two things in common. One, it is expected that your data are unprojected (i.e. Longitude and Latitude) and two that the data are simple text or in JSON (either GeoJSON or TopoJSON). This works for many use cases, but not for mine.\nI usually start with small(ish) spatial data that are stored in GIS formats (e.g. shapefiles, esri rasters, file geodabase, etc.) and are projected. I use rgdal or raster to pull those into R and then do whatever it is I am doing to those and get sp and raster objects as output. At this point all I want to be able to do is quickly visualize the resultant data (usually less than 3 or 4 layers at a time), interact with that data by zooming, panning, and identifying values in the data interactively. I want to be able to this without having to convert to JSON or without having to un-project the data. The result of this desire is quickmapr.\nWith quickmapr you set up a qmap object by passing as many sp and raster objects as you’d like. There are some very basic controls on draw order and color. There are several zoom functions, a pan function, an identify function (which also returns the selected sp object or raster value), and a (currently very clunky) labeling function. This package is still a work in progress and I am hoping to keep working on quickmapr and tweaking how it works. I would love feedback so if you have thoughts, comments, complaints, etc don’t hesitate to leave some comments here, or better yet post issues on github, or fork the repo and make changes yourself. I will try and get up some contributing guidelines in the not too distant future."
  },
  {
    "objectID": "posts/i-finally-got-quickmakr-up-on-cran/index.html",
    "href": "posts/i-finally-got-quickmakr-up-on-cran/index.html",
    "title": "I finally got quickmapr on CRAN!",
    "section": "",
    "text": "The README on GitHub provides details plus some examples using a small dataset included with the package. I would be thrilled to get some feedback from people on the package, ease of use, suggestions for improvements, etc. I would be even more thrilled if you try it out on different datasets. Any thoughts just add them as issues."
  },
  {
    "objectID": "posts/r-gis-lightning-demo/index.html",
    "href": "posts/r-gis-lightning-demo/index.html",
    "title": "Spatial Data Analysis in R: Lightning Demo!",
    "section": "",
    "text": "At this years NEARC meeting I decided to give a lightning talk on using R as a GIS. As I was working on this I thought, “why not try a lightning demo?” That would be better than five minutes of slides on packages and commands. But, as anyone who has done a live demo will know, they often provide unexpected challenges. Add a 5 minute limit to that, and well, some level of failure is sure to occur. Becuase of this I have decided put everything into a web page so that the attendees (and others) can access the full demo at a later date. The full text and code is at http://jwhollister.com/rgis_lightning_demo."
  },
  {
    "objectID": "posts/chromebook-4-rstats/index.html",
    "href": "posts/chromebook-4-rstats/index.html",
    "title": "Setting up an Asus Flip C302CA Chromebook for R Development",
    "section": "",
    "text": "The steps below are not really tested. So if you run into problems or I have missed something, let me know.\n\nSteps\n\nEnter Developer Mode\n\n\nEsc - Refresh - Power\nFollow directions\nTakes a while (~30 minutes)\n\n\nDownload crouton\nAdd crouton integration extension\nCreate chroot\n\n\nOpen crosh - ctrl-alt-T\nStart bash - shell\nIntall xfce xiwi extension touch\n\nsudo sh ~/Downloads/crouton -e -t xfce,touch,xiwi,extension\n\nIt’ll ask for a new username and password\nSince we are encrypting the chroot (with -e) it will also ask for a passphrase. I’m certainly not a security expert, but don’t use the same one as your google or new chroot password…\nThis takes a while (~15 minutes)\n\n\nYou should now have a working ubuntu install with the xfce desktop available. Fire that up.\n\n\nIf you don’t have shell still open, get to that (ctrl-alt-T and shell)\ntype sudo startxfce4\nTa-da! Linux!\n\n\nNow we can start installing all the tools that we need from our xfce window.\n\n\nget to a terminal\nInstall Git\n\nsudo apt-get install git\n\nInstall R\n\nFor more: https://cran.r-project.org/bin/linux/ubuntu/README.html and nice streamlined instructions https://www.datascienceriot.com/how-to-install-r-in-linux-ubuntu-16-04-xenial-xerus/kris/\n\n\nsudo echo \"deb http://cran.rstudio.com/bin/linux/ubuntu xenial/\" | sudo tee -a /etc/apt/sources.list\ngpg --keyserver keyserver.ubuntu.com --recv-key E084DAB9\ngpg -a --export E084DAB9 | sudo apt-key add -\nsudo apt-get update\nsudo apt-get install r-base r-base-dev\n\nInstall RStudio\n\nI like to live on the edge so I usually have a fairly recent daily running. Here’s how you get that.\nYou will also need to add some older versions of libgstreamer. Good details on this from Mike Williamson.\nI also delete the .deb since this is on a chromebook. Space will likely be at a bit of a premium.\n\n\n# Download the installs\nwget https://s3.amazonaws.com/rstudio-dailybuilds/rstudio-1.1.244-amd64.deb\nwget http://ftp.ca.debian.org/debian/pool/main/g/gstreamer0.10/libgstreamer0.10-0_0.10.36-1.5_amd64.deb\nwget http://ftp.ca.debian.org/debian/pool/main/g/gst-plugins-base0.10/libgstreamer-plugins-base0.10-0_0.10.36-2_amd64.deb\n \n# Now install deps with dpkg and mark to not update\nsudo dpkg -i libgstreamer0.10-0_0.10.36-1.5_amd64.deb\nsudo dpkg -i libgstreamer-plugins-base0.10-0_0.10.36-2_amd64.deb\nsudo apt-mark hold libgstreamer-plugins-base0.10-0\nsudo apt-mark hold libgstreamer0.10\n\n# Lastly install rstudio\nsudo gdebi rstudio-1.1.244-amd64.deb\nrm rstudio-1.1.201-amd64.deb\n\nThe following are the notes I had for which libraries I added. My notes were a bit of a mess so this might not be all or may be too many.\n\nSome of the basics (i.e. for devtools)\nsudo apt-get install libxslt-dev libcurl4-openssl-dev libssl-dev\nThe spatial stuff. This also adds the ubuntugis repo so that you can get the latest and greatest. The latest is at https://launchpad.net/~ubuntugis/+archive/ubuntu/ubuntugis-unstable\nBut, add-apt-repository was not installed. To get that I used sudo apt-get install software-properties-common. Now to add the GIS stuff.\nsudo add-apt-repository ppa:ubuntugis/ubuntugis-unstable\nsudo apt-get update\nsudo apt-get install libgdal-dev libproj-dev\nIn addition to gdal, geos, and proj, libudunits2-dev is needed and can be installed with apt-get: sudo apt-get install libudunits2-dev.\nAlso, if you do any work with rmarkdown, knitr, and the like you will probably want a working install of latex. I used the following:\nsudo apt-get install texlive texlive-latex-extras texlive-pictures\n\nWorking with RStudio on your chromebook\n\nNot a whole lot of details here. Just some basic notes I had for myslef. First, I am using a 64GB microSD card to give myself some room and I keep all of my projects stored on this card (as well as on GitHub). I just set up a symbolic link to this from my home folder. Something like the following should do the trick.\ncd \nln -s /var/host/media/removable/SD\\ Card/ projects\nWith this you can get to the card easier (e.g. cd ~/projects). Only issue I have had with this is that trying to browse local HTML files from R blows up as the linux path to the SD Card doesn’t play nice on the Chrome OS side. Still need to figure this one out.\nI am still playing around with the best way to fire up rstudio. There are two ways I am doing this. Either firing up a separate desktop and using RStudio from there or starting RStudio in its own window. I think I prefer the later, but time will tell. You already know how to fire up the desktop. You can use rstudio from a terminal or find it in your applications menu. For the RStudio in its own window, I added this:\nalias rstudio=\"sudo startxiwi rstudio -F\"\nto my ~/.bashrc in the chromebook (not the chroot!) shell. Then I can fire up rstudio with ctrl-alt-T, then shell, then rstudio.\nGiven the hi-res of the screen, you’ll need to either get super vision or mess with the display settings in the Xfce desktop or adjust the X11 setting that the Chrome crouton integration is using. I used a lot of the suggestions in the crouton on Pixel section of the crouton Wiki. In particular, Option 1 helped with firing up RStudio direction. I also bumped the zoom in my RStudio Global options.\nLastly, the locale is not set in your linux install so to take care of that, I followed these directions from Ask Ubuntu. In particular:\nsudo locale-gen \"en_US.UTF-8\"\nsudo dpkg-reconfigure locales #you'll need to cycle through with arrows, tabs, and enters\nI think that should do the trick on any locale issues, but dealing with this made me realize how little I actually now about locales and text encoding…\nFnally and hopefully you should now be ready to roll with R and R development on your fancy new chromebook! See below for some additional links.\n\n\nSome related links\n\nWeb Dev on chromebook - 1\nWeb Dev on Chromebook - 2\nYet another crouton how to"
  },
  {
    "objectID": "posts/rstudio-server-on-a-chromebook/index.html",
    "href": "posts/rstudio-server-on-a-chromebook/index.html",
    "title": "Rstudio Server On A Chromebook",
    "section": "",
    "text": "The only post I got around to writing in 2017 was a single messy, evoloving set of notes on how to set up a Chromebook with R and RStudio. This post is a reprise of that one as well as post #1 in my effort to double my blog output from 2017 (I’m shooting for the stars on that goal). In this post I will detail how to set up RStudio Server in a crouton chroot and access it directly via Chrome without having to fire up a separate X11 window."
  },
  {
    "objectID": "posts/rstudio-server-on-a-chromebook/index.html#why-rstudio-server",
    "href": "posts/rstudio-server-on-a-chromebook/index.html#why-rstudio-server",
    "title": "Rstudio Server On A Chromebook",
    "section": "Why RStudio Server?",
    "text": "Why RStudio Server?\nI have been succesfully using RStudio Desktop on my Chromebook all year and it has worked great. But there have been a few issues that have kind of bothered me. The top four of these are: opening web pages from RStudio, opening documents (PDF or Word), overall look and feel, and (the big one) not being able to pull out a source tab into a separate window. None of these are deal breakers, but they did lead to a bit of a bumpy workflow at times. I did not have these problems when accessing RStudio Server in the browser, but I don’t want to pay for servers to host RStudio Server nor do I want to require an internet connection to work. I figured I could stand up RStudio Server in a chroot, access it directly in Chrome via localhost and have a much more native ChromeOS feeling experience.\nThe long and short of it is that it is pretty easy to get set up (if you are comfortable setting up crouton) and the overall experience is much improved with web pages and documents just opening up in new tabs as you’d expect. The biggest improvement is now I can pull out those source tabs into a stand alone window and take advantage of the real estate of dual screens!\nSo enough yammering, how do you do it?"
  },
  {
    "objectID": "posts/rstudio-server-on-a-chromebook/index.html#install-crouton-and-set-up-your-chroot",
    "href": "posts/rstudio-server-on-a-chromebook/index.html#install-crouton-and-set-up-your-chroot",
    "title": "Rstudio Server On A Chromebook",
    "section": "Install crouton and set up your chroot",
    "text": "Install crouton and set up your chroot\nThere are a lot of great resources for installing crouton so no need for me to go over that again. In particular take a look at Jenny Bryan’s notes and the crouton repository\nFor RStudio Server we don’t need a full desktop so I decided to try this with a minimal install. I chose core and cli-extra because, frankly, I didn’t know the difference between the two and was just playing it safe. You can choose to encrypt the chroot or not. I didn’t as I was playing around with auto-starting the chroot when Chrome OS starts (see here for more on that). Never got that part of it working right.\nupdate 2018-01-28: With just core and cli-extra you are missing a few things. Most notably for me, sound was not working correctly. And well, I need Rasmus Bååth’s beepr package. Adding the extension target fixed this.\nupdate 2018-01-30: While extension fixed the audio issue, I was still having problems with RStudio Server and R Session getting discombobulated. I tried a full desktop install and that appears to be working much better. So the idea of using the minimal install wasn’t so great as some needed tooling was obviously missing. The rest of this post has been updated to reflect this.\nAnyway, here is what I used to get my chroot set up.\nsudo sh ~/Downloads/crouton -t xfce,extension -n rstudio\nOnce that finishes (it takes a while), you can hop into the chroot with\nsudo enter-chroot"
  },
  {
    "objectID": "posts/rstudio-server-on-a-chromebook/index.html#install-r",
    "href": "posts/rstudio-server-on-a-chromebook/index.html#install-r",
    "title": "Rstudio Server On A Chromebook",
    "section": "Install R",
    "text": "Install R\nWith a shiny new chroot started, we can now start all of our installs. First one is R.\nsudo echo \"deb http://cran.rstudio.com/bin/linux/ubuntu xenial/\" | sudo tee -a /etc/apt/sources.list\ngpg --keyserver keyserver.ubuntu.com --recv-key E084DAB9\ngpg -a --export E084DAB9 | sudo apt-key add -\nsudo apt-get update\nsudo apt-get install r-base r-base-dev"
  },
  {
    "objectID": "posts/rstudio-server-on-a-chromebook/index.html#install-rstudio-server",
    "href": "posts/rstudio-server-on-a-chromebook/index.html#install-rstudio-server",
    "title": "Rstudio Server On A Chromebook",
    "section": "Install RStudio Server",
    "text": "Install RStudio Server\nNext, we need to install RStudio Server. This grabs the latest and greatest version as of January 2018. I choose to delete the .deb just to keep the footprint of this thing to a minimum.\nsudo apt-get install gdebi-core\nwget https://download2.rstudio.org/rstudio-server-1.1.419-amd64.deb\nsudo gdebi rstudio-server-1.1.419-amd64.deb\nrm rstudio-server-1.1.419-amd64.deb\nAs an aside, I got distracted when I started working on this section. I wanted to be able to download the current version of RStudio Server without actually knowing what that version was. Luckily, RStudio lists those as XML at https://downloads2.rstudio.org. Unluckily, I know next to nothing about working with XML so this code certainly reflects that as I convert to string and parse that for the current version. If you are interested, here’s the function that gets the current version of RStudio Server. Also if you have thoughts on a more direct root (seems like it could be done within the XML itself), let me know in the comments.\nget_rstudio_server <- function(arch = c(\"amd64\",\"i386\",\"i686\",\"x86_64\"),\n                               file_type = c(\".deb\",\".rpm\"),\n                               pro = FALSE, get = TRUE){\n  arch <- match.arg(arch)\n  file_type <- match.arg(file_type)\n  url <- 'https://download2.rstudio.org'\n  dat <- xml2::read_xml(url)\n  dat_txt <- xml2::xml_text(xml2::xml_children(dat)) \n  current <- dat_txt[stringr::str_detect(dat_txt,\"current\")]\n  current_date <- stringr::str_sub(current,12,21)\n  deb_files <- dat_txt[stringr::str_detect(dat_txt,current_date)]\n  deb_files <- deb_files[stringr::str_detect(deb_files,paste0(arch,file_type))]\n  if(length(deb_files) == 0){\n    stop(\"Not a valid arch and file_type combination\")\n  }\n  if(pro){\n    deb_file <- deb_files[stringr::str_detect(deb_files, \"pro\")]\n  } else {\n    deb_file <- deb_files[!stringr::str_detect(deb_files, \"pro\")]\n  }\n  deb_file <- stringr::str_sub(deb_file,1,\n                               stringr::str_locate(deb_file,current_date)[1]-1)\n  deb_file <- deb_file[1]\n  if(get){\n    httr::GET(paste0(url,\"/\",deb_file),httr::write_disk(deb_file, overwrite = TRUE),\n              httr::progress())\n  }\n  deb_file\n}"
  },
  {
    "objectID": "posts/rstudio-server-on-a-chromebook/index.html#open-up-firewall",
    "href": "posts/rstudio-server-on-a-chromebook/index.html#open-up-firewall",
    "title": "Rstudio Server On A Chromebook",
    "section": "Open up firewall",
    "text": "Open up firewall\nSince this is RStudio server, we will be accessing it via Chrome and will need to make sure the requests get through the chroot’s firewall. We need to open that up to do so. I include the nano install because it is a little easier to work with than vim.\nsudo apt-get install nano\nsudo nano /etc/rc.local\nThen add /sbin/iptables -I INPUT -p tcp --dport 8787 -j to the end of the file. While I was editing the file, I also added /sbin/iptables -I INPUT -p tcp --dport 4321 -j to open up the port for Hugo. I’m switching to blogdown for my website and wanted to be able to easily get at the preview versions.\nupdate 2018-01-30: Actually forgot to do this with my test of the xfce desktop and I had no trouble access the server. So, apparently not needed. I’m keep the instructions here mostly so I have access to them if other things (i.e. hugo) do require them."
  },
  {
    "objectID": "posts/rstudio-server-on-a-chromebook/index.html#get-rstudio-server-running-and-access-it",
    "href": "posts/rstudio-server-on-a-chromebook/index.html#get-rstudio-server-running-and-access-it",
    "title": "Rstudio Server On A Chromebook",
    "section": "Get RStudio server running and access it",
    "text": "Get RStudio server running and access it\nNow you need to start up the server.\nsudo rstudio-server start\nThen in your browser you can access your RStudio Server with localhost:8787"
  },
  {
    "objectID": "posts/rstudio-server-on-a-chromebook/index.html#draw-the-rest-of-fing-owl",
    "href": "posts/rstudio-server-on-a-chromebook/index.html#draw-the-rest-of-fing-owl",
    "title": "Rstudio Server On A Chromebook",
    "section": "Draw the rest of f***ing owl",
    "text": "Draw the rest of f***ing owl\nApologies if you have seen the “how to draw an owl” meme. It feels appropriate at this point. What follows are all the things I had to add to get up and running with my standard set-up.\nFirst, let’s change the locale and add some needed tools\nsudo locale-gen \"en_US.UTF-8\"\nsudo dpkg-reconfigure locales\nsudo apt-get install software-properties-common libxslt1-dev libcurl4-openssl-dev libssl-dev libssh2-1-dev\nNext I needed to add the Ubuntu GIS repositories so I can get the up to date versions of GDAL, GEOS, etc.\nsudo add-apt-repository ppa:ubuntugis/ubuntugis-unstable\nsudo apt-get update\nAnd add my GISy libraries\nsudo apt-get install libgdal-dev libproj-dev libudunits2-dev\nThen we can add LaTeX\nsudo apt-get install texlive texlive-latex-extra texlive-pictures\nIn my experience this is close to the minimal LaTeX install that will work with pandoc, R Markdown, etc.\nLastly, some version control!\nsudo apt-get install git\nAnd then I configure git.\ngit config --global user.name \"Your Name\"\ngit config --global user.email \"your.email@email.com\"\ngit config --global credential.helper 'cache --timeout=28800'"
  },
  {
    "objectID": "posts/rstudio-server-on-a-chromebook/index.html#day-to-day-use",
    "href": "posts/rstudio-server-on-a-chromebook/index.html#day-to-day-use",
    "title": "Rstudio Server On A Chromebook",
    "section": "Day to day use",
    "text": "Day to day use\nThere is a way to have your chroot automatically boot with Chrome OS and RStudio Server is supposed to start on boot. For some reason, the server wasn’t kicking off when I started up the chroot. I didn’t track this down so don’t know if it will work. Seems like with some hacking it should.\nSo given that I couldn’t get everything starting automagicaly, the simplest solution I came up with is to:\n\nstart up my chromebook\nopen crosh - ctrl-alt-t\ntype shell\ntype sudo enter-chroot\ntype sudo rstudio-server start\ntype localhost:8787 into a broswer tab.\n\nAnother way to go with this is set up a couple of aliases in ~/.bashrc. You can do this with:\n\nat your crosh shell: vi ~/.bashrc\nadd this to the file: alias rstudio=\"sudo enter-chroot -n rstudio\"\nnow type in the shell . ~/.bashrc.\n\ntype rstudio in the shell. Once you enter your password, you will be in your chroot.\nenter some aliases for starting the server\ntype nano ~./bashrc\nadd this: alias rstudio=\"sudo rstudio-server start\"\ntype rstudio, enter password.\ntype localhost:8787 into a browser tab.\n\nThe first time I get RStudio open I want to install all my usual suspects. With this set up I had no issues installing the following\npkgs <- c(\"devtools\",\"tidyverse\",\"sf\",\"raster\",\"mapview\",\"sp\",\"rgdal\",\"rgeos\",\"roxygen2\", \"blogdown\")\n\nlapply(pkgs, install.packages)\nI then install my own packages, just so I have them handy"
  },
  {
    "objectID": "posts/rstudio-server-on-a-chromebook/index.html#one-little-hiccup",
    "href": "posts/rstudio-server-on-a-chromebook/index.html#one-little-hiccup",
    "title": "Rstudio Server On A Chromebook",
    "section": "One little hiccup",
    "text": "One little hiccup\nThe shutdown process is not super smooth on this (only problem I have identified so far). When your chromebook sleeps, or you shut down the chroot, etc. The R session and RStudio get confused. A scary error will pop-up when you try to get backin in and at this point, I can no longer switch between projects. When you select a new project it looks like it is switching, but ends keeping you at your root without a project. If you don’t use projects then this might not be an issue (but you do risk the arsonistic ire of Jenny Bryan). If you do use projects this is a problem. I did find a very simple workaround for when this happens. All you need to do is start a new session. This can be done with the little red power button icon in the upper right corner of the window or with File:Quit Session.\nupdate 2018-01-30: Using the xfce desktop install seems to have fixed this issue. No need to unnecessarily start new session now!\nSo, there you have it. RStudio on a chromebook via RStudio Server running in a chroot! I am now very happy with the set-up and fully expect to stick with the Chromebook for some time to come."
  },
  {
    "objectID": "posts/what-goes-up-must-blogdown-version-3-or-4-of-jwhollister-com/index.html",
    "href": "posts/what-goes-up-must-blogdown-version-3-or-4-of-jwhollister-com/index.html",
    "title": "What goes up, must Blogdown: Version 3 (or 4) of jwhollister.com",
    "section": "",
    "text": "First, here are the links I found to be best:\n\nBlogdown Book\nUp and Running with Blogdown - Allison Presmanes Hill\nHugo Documentation\n\nSecond, I struggled picking a theme. I didn’t want one that was too fancy, but many of the simple themes had things missing that I wanted. In the end, I chose one of the nicest (IMO) of the clean themes, Nan Xiao’s Tanka. I made a few small tweaks for my purposes. First, I wanted to be able to create some stand alone pages that would have dates listed on them or get added to the blog listing on the main page. Second, I made a few tweaks to colors, and Last, I add some fanciness with the Font Awesome icons on the menus.\nAll in all, an improvement over my old site and now I can be like the cool kids."
  }
]